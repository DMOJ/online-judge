extends base
- load staticfiles
- load i18n
- load compress

block js_media
    if has_select2
        script(type='text/javascript', src='{{ SELECT2_JS_URL }}')
    script(type='text/javascript', src='{{ ACE_URL }}/ace.js')
    - compress js
        | #{form.media.js}
        script(type='text/javascript').
            $(function () {
                function format(state) {
                    if (!state.id) return state.text; // optgroup
                    return state.text;
                }

                function makeDisplayData(data) {
                    var site_data = data.attr('data-info');
                    var judge_data = data.attr('data-judge-info');
                    var display_data = site_data || judge_data;
                    return display_data;
                }

                function formatSelection(state) {
                    if (!state.id) return state.text; // optgroup
                    var data = makeDisplayData($("option[data-id=" + state.id + "]"));
                    return "<b>" + state.text + "</b> (" + data + ")";
                }

                // Terrible hack, adapted from https://github.com/select2/select2/issues/4436
                $.fn.select2.amd.define('select2/data/customAdapter', ['select2/results', 'select2/utils'], function (Result, Utils) {
                    RefPresenter = function ($element, options, dataAdapter) {
                        RefPresenter.__super__.constructor.call(this, $element, options, dataAdapter);
                    };
                    Utils.Extend(RefPresenter, Result);
                    RefPresenter.prototype.bind = function (container, $container) {
                        container.on('results:focus', function (params) {
                            var data = makeDisplayData($("option[data-id=" + params.data.id + "]"));
                            $("#result-version-info").text(data);
                        });
                        RefPresenter.__super__.bind.call(this, container, $container);
                    };
                    return RefPresenter;
                });

                var customAdapter = $.fn.select2.amd.require('select2/data/customAdapter');

                $("#id_language").select2({
                    templateResult: format,
                    templateSelection: formatSelection,
                    escapeMarkup: function (m) {
                        return m;
                    },
                    resultsAdapter: customAdapter
                });

                $('#id_language').on('select2:open', function (evt) {
                    var dropdown = $('.select2-dropdown');
                    if (!$('#result-version-info').length)
                        dropdown.append($("<span id=\"result-version-info\"/>"));
                });

                $('#id_language').change(function () {
                    var lang = $("#id_language").find("option:selected").attr('data-ace');
                    window.ace_source.getSession().setMode("ace/mode/" + lang);
                });

                $('#ace_source').on('ace_load', function (e, editor) {
                    var source = $('textarea#id_source');
                    if (source.val() == '') {
                        var code = localStorage.getItem('submit:' + $('#id_problem').val());
                        if (code) {
                            source.val(code);
                            editor.getSession().setValue(code);
                        }
                    }
                    editor.commands.addCommand({
                        name: 'save',
                        bindKey: {win: 'Ctrl-S', mac: 'Command-S'},
                        exec: function () {
                            localStorage.setItem('submit:' + $('#id_problem').val(), editor.getSession().getValue());
                        }
                    });
                    editor.getSession().setUseWrapMode(true);
                    editor.setFontSize(14);
                    editor.setPrintMarginColumn(100);
                    editor.focus();
                });

                $(window).resize(function () {
                    $('#ace_source').height(Math.max($(window).height() - 353, 100));
                }).resize();
            });

block media
    if has_select2
        link(href="{{ SELECT2_CSS_URL }}", type="text/css", media="screen", rel="stylesheet")
    - compress css
        | #{form.media.css}
        style(media='screen').
            #submit-wrapper {
                margin-top: 0.7em;
            }

            #submit-wrapper #problem-id, #submit-wrapper #editor, #submit-wrapper #language {
                margin-top: 4px;
            }

            #id_language {
                width: 100%;
            }

            #result-version-info {
                border-bottom: 1px solid rgb(148, 148, 148);
                margin: 0px 1em;
                color: #757575;
                font-weight: 600;
                padding: 0.2em 0;
                text-align: right;
            }

            .select2-results__message {
                white-space: nowrap
            }

            .select2-dropdown--above {
                display: flex;
                flex-direction: column-reverse;
            }

            .select2-results__option {
                color: #757575 !important;
                background: white !important;
            }

            .select2-results__option--highlighted {
                text-decoration: underline;
            }

            .select2-results__option[aria-selected=true] {
                font-weight: bold;
                color: black !important;
            }

            .select2-results__option {
                padding: 4px 0px;
            }

            .select2-results__options {
                overflow-y: visible !important;
            }

            .select2-results__option {
                break-inside: avoid-column;
            }

            .select2-results {
                -webkit-columns: 10 7em;
                -moz-columns: 10 7em;
                columns: 10 7em;
                padding-left: 1.5em;
                padding-top: 0.5em;
            }


block body
    br
    form#problem_submit.form-area(style='width:100%;box-sizing:border-box', action='', method='post')
        - csrf_token
        | #{form.non_field_errors}
        #submit-wrapper
            #problem-id
                | #{form.problem.errors}
                | #{form.problem}
            #editor
                | #{form.source.errors}
                | #{form.source}
            if not no_judges
                #language
                    | #{form.language.errors}
                    #language-select
                        select#id_language(name='language'): each lang in form.fields.language.queryset
                            - var runtime_versions = lang.runtime_versions
                            option(value=lang.id, data-id=lang.id, data-name=lang.name, data-info=lang.info,
                            data-judge-info='{% include "runtime-version-fragment.jade" %}',
                            data-ace=lang.ace, selected=('' if lang.id == default_lang.id else None))= lang.name
        hr
        if no_judges
            span(style='color: red') {% trans "No judge is available for this problem." %}
        else
            input(class="button", style="float:right;padding:6px 12px", type='submit', value='{% trans "Submit!" %}')

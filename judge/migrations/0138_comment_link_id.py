# Generated by Django 3.2.16 on 2023-02-06 08:31

from django.db import migrations, models
from django.db.models import F


def copy_new_to_old(apps, schema_editor):
    Comment = apps.get_model('judge', 'Comment')
    Comment.objects.all().update(page_old=F('page'))

    CommentLock = apps.get_model('judge', 'CommentLock')
    CommentLock.objects.all().update(page_old=F('page'))


def copy_old_to_new(apps, schema_editor):
    Comment = apps.get_model('judge', 'Comment')
    Comment.objects.all().update(page=F('page_old'))

    CommentLock = apps.get_model('judge', 'CommentLock')
    CommentLock.objects.all().update(page=F('page_old'))


def populate_new(apps, schema_editor):
    d = {}
    for problem in apps.get_model('judge', 'Problem').objects.all():
        d[f'p:{problem.code}'] = f'p:{problem.id}'
        d[f's:{problem.code}'] = f's:{problem.id}'
    for contest in apps.get_model('judge', 'Contest').objects.all():
        d[f'c:{contest.key}'] = f'c:{contest.id}'

    def get_page(page_old):
        if page_old in d:
            return d[page_old]
        if page_old[:2] in ['c:', 'p:', 's:']:
            return f'{page_old[:2]}0'
        return page_old

    for comment in apps.get_model('judge', 'Comment').objects.all():
        comment.page = get_page(comment.page_old)
        comment.save()

    for lock in apps.get_model('judge', 'CommentLock').objects.all():
        lock.page = get_page(lock.page_old)
        lock.save()


class Migration(migrations.Migration):

    dependencies = [
        ('judge', '0137_profile_site_theme'),
    ]

    operations = [
        migrations.AddField(
            model_name='comment',
            name='page_old',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='associated page (old)'),
        ),
        migrations.AddField(
            model_name='commentlock',
            name='page_old',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='associated page (old)'),
        ),
        migrations.RunPython(copy_new_to_old, copy_old_to_new, atomic=True),
        migrations.RunPython(populate_new, migrations.RunPython.noop, atomic=True),
    ]
